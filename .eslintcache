[{"D:\\dev\\my-app\\src\\index.js":"1","D:\\dev\\my-app\\src\\App.js":"2","D:\\dev\\my-app\\src\\serviceWorkerRegistration.js":"3","D:\\dev\\my-app\\src\\reportWebVitals.js":"4","D:\\dev\\my-app\\src\\components\\AnimeInfo\\AnimeInfo.js":"5","D:\\Dev\\go\\anusic-api\\src\\index.js":"6","D:\\Dev\\go\\anusic-api\\src\\App.js":"7","D:\\Dev\\go\\anusic-api\\src\\reportWebVitals.js":"8","D:\\Dev\\go\\anusic-api\\src\\serviceWorkerRegistration.js":"9","D:\\Dev\\go\\anusic-api\\src\\components\\AnimeInfo\\AnimeInfo.js":"10"},{"size":816,"mtime":1612020241560,"results":"11","hashOfConfig":"12"},{"size":3757,"mtime":1612018320210,"results":"13","hashOfConfig":"12"},{"size":5064,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":364,"mtime":499162500000,"results":"15","hashOfConfig":"12"},{"size":7859,"mtime":1612018320228,"results":"16","hashOfConfig":"12"},{"size":816,"mtime":1612020241560,"results":"17","hashOfConfig":"18"},{"size":3757,"mtime":1612018320210,"results":"19","hashOfConfig":"18"},{"size":364,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":5064,"mtime":499162500000,"results":"21","hashOfConfig":"18"},{"size":7859,"mtime":1612018320228,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"nmcuto",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tytzku",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\dev\\my-app\\src\\index.js",[],["46","47"],"D:\\dev\\my-app\\src\\App.js",["48"],"import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport AnimeInfo from './components/AnimeInfo/AnimeInfo';\r\n\r\nexport default class App extends Component {\r\n\r\n  //#region Properties\r\n\r\n  state = {\r\n    animeList: [],\r\n    list: [],\r\n    animeId: -1,\r\n    infoShown: false,\r\n    loading: false\r\n  }\r\n\r\n  endPoint = 'https://anusic-api.herokuapp.com/api/v1';\r\n\r\n  //#endregion\r\n\r\n  //#region Lifecycle\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true });\r\n\r\n    Axios.get(`${this.endPoint}/anime`)\r\n      .then(({ data }) => {\r\n        this.setState({ loading: false });\r\n\r\n        if (!data.hasError) {\r\n          this.setState({ animeList: data.data, list: data.data });\r\n        }\r\n      })\r\n      .catch(() => this.setState({ loading: false }));\r\n  }\r\n\r\n  render() {\r\n    let modal = null;\r\n\r\n    if (this.state.infoShown) {\r\n      modal = <AnimeInfo\r\n        endPoint={this.endPoint}\r\n        animeId={this.state.animeId}\r\n        onAnimeClosed={this.onAnimeClosed.bind(this)}\r\n      />;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar sticky-top navbar-light bg-light px-5\">\r\n          <a href=\"/#\" className=\"navbar-brand\">Anusic React</a>\r\n          <div className=\"form-inline\">\r\n            <input\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n              onChange={(e) => {\r\n                if (e.target.value.length > 0) {\r\n                  this.setState({\r\n                    list: this.state.animeList.filter(anime =>\r\n                      anime.name.toLowerCase()\r\n                        .concat((anime.altNames || []).join(' ').toLowerCase())\r\n                        .concat((anime.year || 0).toString())\r\n                        .includes(e.target.value.toLowerCase().trim())\r\n                    )\r\n                  });\r\n                } else {\r\n                  this.setState({ list: this.state.animeList });\r\n                }\r\n              }} />\r\n          </div>\r\n        </nav>\r\n\r\n        <main className=\"p-5\">\r\n          <div\r\n            className=\"alert alert-dark\"\r\n            role=\"alert\">\r\n            <b>{this.state.list.length}</b> Anime fetched!\r\n\r\n            {\r\n              this.state.loading ?\r\n                <div className=\"spinner spinner-border float-right\" role=\"status\">\r\n                  <span className=\"visually-hidden\"></span>\r\n                </div>\r\n                : ''\r\n            }\r\n          </div>\r\n          <ul\r\n            className=\"list-group\">\r\n            {\r\n              this.state.list.map((e, i) => (\r\n                <a\r\n                  className=\"list-group-item list-group-item-action\"\r\n                  key={i}\r\n                  onClick={() => this.onAnimeClicked(e)}\r\n                >\r\n                  <span className=\"name\">{e.name}</span>\r\n                  {e.year\r\n                    ? <span className=\"badge badge-secondary float-right\">{e.year}</span>\r\n                    : ''}\r\n\r\n                  {e.altNames && e.altNames.length > 0\r\n                    ? <p className=\"alt\">{e.altNames.join(\",\")}</p>\r\n                    : ''}\r\n                </a>\r\n              ))\r\n            }\r\n          </ul>\r\n        </main>\r\n\r\n        {modal}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Events\r\n\r\n  /**\r\n   * Opens the modal\r\n   * @param {object} anime The anime to open\r\n   */\r\n  onAnimeClicked(anime) {\r\n    this.setState({ infoShown: true, animeId: anime.id });\r\n  }\r\n\r\n  /**\r\n   * Closes the modal\r\n   */\r\n  onAnimeClosed() {\r\n    this.setState({ infoShown: false });\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","D:\\dev\\my-app\\src\\serviceWorkerRegistration.js",[],"D:\\dev\\my-app\\src\\reportWebVitals.js",[],"D:\\dev\\my-app\\src\\components\\AnimeInfo\\AnimeInfo.js",["49","50","51","52","53"],"import { Component, Fragment } from \"react\";\r\nimport Axios from 'axios'\r\n\r\nimport './AnimeInfo.css';\r\n\r\nexport default class AnimeInfo extends Component {\r\n\r\n  //#region Properties\r\n\r\n  state = {\r\n    mode: 0,\r\n    anime: {},\r\n    targetTheme: null,\r\n    loading: false\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Lifecycle\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true });\r\n\r\n    Axios.get(`${this.props.endPoint}/anime/${this.props.animeId}`)\r\n      .then(({ data }) => {\r\n        this.setState({ loading: false });\r\n\r\n        if (!data.hasError) {\r\n          this.setState({ anime: data.data });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        this.setState({ loading: false });\r\n        this.props.onAnimeClosed();\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    let collections = [];\r\n    let tabs = [];\r\n    let player = null;\r\n\r\n    if (this.state.anime && this.state.anime.collections) {\r\n\r\n      // Populating the collections\r\n      collections = this.state.anime.collections.filter(c => this.collectionHasThemes(c, this.state.mode)).map((col, index) => (\r\n        <details key={index + (100 * (this.state.mode + 1))} open={index === 0}>\r\n          <summary>\r\n            <h6><span class=\"badge badge-light\">{this.getThemesCount(col, this.state.mode)}</span> {col.name}</h6>\r\n          </summary>\r\n\r\n          <ul className=\"list-group mb-2\">\r\n            {\r\n              col.themes.filter(theme => theme.type === this.state.mode).map((theme, idx) => (\r\n                <li\r\n                  className=\"list-group-item\"\r\n                  key={idx + (200 * (this.state.mode + 1))}>\r\n                  <div>\r\n                    <span className=\"badge badge-primary mr-1\">{this.state.mode === 0 ? 'OP' : 'ED'} {theme.order}</span>\r\n                    <span className=\"badge badge-secondary mr-1\">V{theme.version}</span>\r\n                    <b>{theme.name}</b>\r\n\r\n                    {theme.isNSFW === true ? <span className=\"badge badge-danger ml-1 float-right\">NSFW</span> : ''}\r\n                    {theme.hasSpoilers === true ? <span className=\"badge badge-danger ml-1 float-right\">SPOILERS</span> : ''}\r\n                  </div>\r\n                  <ul className=\"list-group mt-2\">\r\n                    {\r\n                      theme.sources.map((source, i) => (\r\n                        <li\r\n                          className=\"list-group-item\"\r\n                          key={i + (300 * (this.state.mode + 1))}\r\n                        >\r\n                          <a href=\"#\" onClick={() => this.playTheme(source.link)}>Play audio</a>\r\n                          <a target=\"_blank\"\r\n                            class=\"ml-4\"\r\n                            href={source.link}>Open video</a>\r\n                        </li>\r\n                      ))\r\n                    }\r\n                  </ul>\r\n                </li>\r\n              ))\r\n            }\r\n          </ul>\r\n        </details>\r\n      ));\r\n\r\n      // Populating the tabs\r\n      const openingCount = this.state.anime.collections.reduce((acc, c) => acc + this.getThemesCount(c, 0), 0);\r\n      const endingCount = this.state.anime.collections.reduce((acc, c) => acc + this.getThemesCount(c, 1), 0);\r\n\r\n      if (this.state.anime.collections.filter(c => this.collectionHasThemes(c, 0)).length > 0) {\r\n        tabs.push(\r\n          <li className=\"nav-item\">\r\n            <a className={'nav-link ' + (this.state.mode === 0 ? 'active' : '')}\r\n              onClick={() => this.onModeToggle(0)}><span class=\"badge badge-secondary\">{openingCount}</span> Opening(s)</a>\r\n          </li>\r\n        )\r\n      } else if (this.state.mode === 0 && !this.state.loading) {\r\n        // If no openings are found, switch to the endings tab\r\n        this.setState({ mode: 1 });\r\n      }\r\n\r\n      if (this.state.anime.collections.filter(c => this.collectionHasThemes(c, 1)).length > 0) {\r\n        tabs.push(\r\n          <li className=\"nav-item\">\r\n            <a className={'nav-link ' + (this.state.mode === 1 ? 'active' : '')}\r\n              onClick={() => this.onModeToggle(1)}><span class=\"badge badge-secondary\">{endingCount}</span> Ending(s)</a>\r\n          </li>\r\n        )\r\n      }\r\n    }\r\n\r\n    if (this.state.targetTheme) {\r\n      player = (\r\n        <audio controls\r\n          id=\"player\">\r\n          <source\r\n            src={this.state.targetTheme}\r\n            type=\"audio/ogg\"\r\n          ></source>\r\n        </audio>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"modal\">\r\n          {\r\n            this.state.loading ?\r\n              <div className=\"spinner spinner-border text-light float-right\" role=\"status\">\r\n                <span className=\"visually-hidden\"></span>\r\n              </div> :\r\n              <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">\r\n                      <div className=\"title\">\r\n                        {this.state.anime.name}\r\n                        {this.state.anime.year\r\n                          ? <span className=\"badge badge-secondary float-right\">{this.state.anime.year}</span>\r\n                          : ''}\r\n                      </div>\r\n                      <p className=\"alt\">{this.state.anime.altNames ? this.state.anime.altNames.join(\",\") : ''}</p>\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"close\"\r\n                      data-dismiss=\"modal\"\r\n                      aria-label=\"Close\"\r\n                      onClick={() => this.props.onAnimeClosed()}>\r\n                      <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                  </div>\r\n\r\n                  <div className=\"modal-body\">\r\n                    <ul className=\"nav nav-tabs\">\r\n                      {tabs}\r\n                    </ul>\r\n\r\n                    <div className=\"tab\">\r\n                      {collections}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"modal-footer\">\r\n                    {player}\r\n                    <a\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary\"\r\n                      target=\"_blank\"\r\n                      href={`https://myanimelist.net/anime/${this.state.anime.id}`}\r\n                    >Visit MAL Page</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          }\r\n        </div>\r\n      </Fragment >\r\n    )\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Events\r\n\r\n  /**\r\n   * Toggles the tab mode\r\n   * @param {number} mode The selected theme type (0 opening / 1 ending)\r\n   */\r\n  onModeToggle(mode) {\r\n    this.setState({ mode })\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Methods\r\n\r\n  /**\r\n   * Checks whether a collection has themes\r\n   *\r\n   * @param {object} collection The collection that contains the themes\r\n   * @param {number} type The type of the theme (0 opening / 1 ending)\r\n   */\r\n  collectionHasThemes(collection, type) {\r\n    return collection.themes.some(t => t.type === type);\r\n  }\r\n\r\n  /**\r\n   * Gets the number of themes of a given type that belong to a collection\r\n   *\r\n   * @param {object} collection The collection that contains the themes\r\n   * @param {number} type The type of the theme (0 opening / 1 ending)\r\n   */\r\n  getThemesCount(collection, type) {\r\n    return collection.themes.filter(t => t.type === type && t.version === 1).length;\r\n  }\r\n\r\n  /**\r\n   * Plays the clicked theme\r\n   * @param {string} source The source of the theme (URL)\r\n   */\r\n  playTheme(source) {\r\n    this.setState({ targetTheme: source });\r\n\r\n    setTimeout(() => {\r\n      document.getElementById('player').load();\r\n      document.getElementById('player').play();\r\n    }, 0);\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","D:\\Dev\\go\\anusic-api\\src\\index.js",[],"D:\\Dev\\go\\anusic-api\\src\\App.js",["54"],"D:\\Dev\\go\\anusic-api\\src\\reportWebVitals.js",[],"D:\\Dev\\go\\anusic-api\\src\\serviceWorkerRegistration.js",[],"D:\\Dev\\go\\anusic-api\\src\\components\\AnimeInfo\\AnimeInfo.js",["55","56","57","58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":97,"column":17,"nodeType":"66","endLine":101,"endColumn":18},{"ruleId":"64","severity":1,"message":"67","line":74,"column":27,"nodeType":"66","endLine":74,"endColumn":83},{"ruleId":"68","severity":1,"message":"69","line":75,"column":27,"nodeType":"66","endLine":77,"endColumn":48},{"ruleId":"64","severity":1,"message":"65","line":96,"column":13,"nodeType":"66","endLine":97,"endColumn":52},{"ruleId":"64","severity":1,"message":"65","line":108,"column":13,"nodeType":"66","endLine":109,"endColumn":52},{"ruleId":"68","severity":1,"message":"69","line":169,"column":21,"nodeType":"66","endLine":174,"endColumn":22},{"ruleId":"64","severity":1,"message":"65","line":97,"column":17,"nodeType":"66","endLine":101,"endColumn":18},{"ruleId":"64","severity":1,"message":"67","line":74,"column":27,"nodeType":"66","endLine":74,"endColumn":83},{"ruleId":"68","severity":1,"message":"69","line":75,"column":27,"nodeType":"66","endLine":77,"endColumn":48},{"ruleId":"64","severity":1,"message":"65","line":96,"column":13,"nodeType":"66","endLine":97,"endColumn":52},{"ruleId":"64","severity":1,"message":"65","line":108,"column":13,"nodeType":"66","endLine":109,"endColumn":52},{"ruleId":"68","severity":1,"message":"69","line":169,"column":21,"nodeType":"66","endLine":174,"endColumn":22},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation"]